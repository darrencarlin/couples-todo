datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  todos Todo[]
  plans Plan[]

  planCategories PlanCategory[]
  todoCategories TodoCategory[]

  significantOtherId String? @default("")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model InviteToken {
  invitee    String
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialId         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialId])
}

model Todo {
  id       String     @id @default(cuid())
  name     String
  metadata Json
  status   TodoStatus @default(ACTIVE)

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  categoryId String?
  category   TodoCategory? @relation(fields: [categoryId], references: [id])

  planId String?
  plan   Plan?   @relation(fields: [planId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  significantOtherId String? @default("")

  @@index([userId, significantOtherId])
}

model Plan {
  id       String   @id @default(cuid())
  name     String
  date     DateTime
  metadata Json

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  categoryId String?
  category   PlanCategory? @relation(fields: [categoryId], references: [id])

  todos Todo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  significantOtherId String? @default("")

  @@index([userId, significantOtherId])
}

model PlanCategory {
  id    String  @id @default(cuid())
  name  String
  color String?
  icon  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  plans  Plan[]
  user   User   @relation(fields: [userId], references: [id])
  userId String

  significantOtherId String? @default("")

  @@index([name, id])
}

model TodoCategory {
  id    String  @id @default(cuid())
  name  String
  color String?
  icon  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  todos  Todo[]
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([name, id])
}

enum TodoStatus {
  ACTIVE
  COMPLETED
}
